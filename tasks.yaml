screenshot_task:
  description: >
    Given a secure Thunder Energy dashboard URL: {url}

    Write a **clean, modular Python script using Selenium** that performs the following operations with robust error handling:

    1. **Login Automation**:
       - Open Chrome using:
         - `--window-size=1920x1080`
         - `--disable-gpu`, `--no-sandbox`
         - (Commented out: `--headless=new`)
       - Visit the login page: `{url}`
       - Wait for and fill:
         - Email input: `//input[@type='email']`
         - Password input: `//input[@type='password']`
         input:
         email: hassnain.abbas@thunderenergy.ai
         password: Thunder@123
       - Click login: `//button[contains(., 'Login')]`

    2. **Navigation**:
       - Wait for login completion (`time.sleep(5)`)
       - Click the sidebar link for **"Sites"**:
         - XPath: `//a[.//strong[text()='Sites']]`
       - Wait for content to load, using:
         - `//h1[contains(text(), 'Snapshot')]` **OR**
         - `//div[contains(text(), 'Power Flow')]`
       - Wait an additional 15 seconds to ensure rendering of charts.

    3. **Screenshot Logic (Modularized)**:
       - Implement a function `scroll_and_capture(driver, folder_path)`:
         - Scrolls through the full height of the page
         - Takes a screenshot at each viewport
         - Saves images as `snapshot_1.png`, `snapshot_2.png`, etc.
         - Stops scrolling once the bottom of the page is reached (no infinite loop)
         - Returns the list of saved screenshot paths

    4. **Save Outputs in a Unique Folder**:
       - Use `hashlib.md5(url.encode()).hexdigest()[:10]` to generate a folder name
       - Save screenshots inside: `screenshots/<url_hash>/`

    5. **Error Handling**:
       - If anything fails:
         - Save a screenshot as `error_debug.png` inside the same folder
         - Save current page HTML as `page_dump.html` (optional)
         - Return an empty list

    6. **Execution Format**:
       - All logic should be wrapped inside a callable main function like `capture_scrollable_snapshot_view()`
       - Use a `__main__` block to execute the script
       - Print the list of all captured screenshot file paths

    IMPORTANT: once task is done, kill the agents process.

  expected_output: >
    {
    "status": "success",
    "paths": ["screenshot_1.png", "screenshot_2.png", "..."]
    }

  agent: screenshot_agent



analyze_task:
  description: >
    Analyze each screenshot using Gemini and extract:
      - Title of the graph/image
      - Visual content summary
      - Trends (if any)
      - OCR labels

    The screenshot paths will be passed from the previous task.
    Write the insights to a file: insights/insights.json

  expected_output: >
    JSON list of structured insights per image, saved in insights/insights.json.

  agent: visual_analyzer

reporting_task:
  description: >
    Load the visual insight data directly from the file insights/insights.json.

    For each image:
      - Use the 'image' and 'analysis' fields
      - Create a markdown section:
          - Title: Image filename
          - Bullet points summarizing the analysis

    Do NOT ask for the URL. The insights are already generated.
    Just format the content from insights/insights.json.

  expected_output: >
    A complete, structured markdown report based on insights/insights.json. Each section should summarize a visual with clear structure and bullet points.

  agent: reporting_analyst